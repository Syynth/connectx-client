{PostApi} = require 'connectx/remotes'
Dispatcher = require 'connectx/dispatcher'
{ActionType} = require 'connectx/constants'
guid = require 'guid'
_ = require 'lodash'

syncPostSuccess = (post, clientId) ->
  Dispatcher.handleServerAction
    type: ActionType.PostSaved
    post: post
    clientId: clientId
    serverId: post.id
syncPostFailure = (post, clientId) ->
  Dispatcher.handleServerAction
    type: ActionType.PostCreationFailed
    post: post
    clientId: clientId

syncCommentSuccess = (postId, clientId, comment) ->
  Dispatcher.handleServerAction
    type: ActionType.CommentSaved
    postId: postId
    clientId: clientId
    serverId: comment.id
    comment: comment
syncCommentFailure = (postId, comment) ->
  Dispatcher.handleServerAction
    type: ActionType.CommentFailed
    postId: postId
    comment: comment

module.exports =

  createPost: (post) ->
    clientId = guid.create().value
    Dispatcher.handleClientAction
      type: ActionType.CreatePost
      clientId: clientId
      posts: [post]
    PostApi.createPost post, (err, data) ->
      return syncPostFailure post, clientId if err
      syncPostSuccess data, clientId

  createComment: (postId, comment) ->
    clientId = guid.create().value
    Dispatcher.handleClientAction
      type: ActionType.CommentCreate
      postId: postId
      comments: [comment]
      clientId: clientId
    PostApi.commentOn postId, comment, (err, data) ->
      return syncCommentFailure postId, clientId, comment if err
      syncCommentSuccess postId, clientId, data

  retryPost: (post) ->
    clientId = post.postId
    Dispatcher.handleClientAction
      type: ActionType.PostResent
      clientId: clientId
      post: post
    PostApi.createPost post, (err, data) =>
      return syncPostFailure post, clientId if err
      syncPostSuccess data, clientId

  removePost: (post) ->
    Dispatcher.handleClientAction
      type: ActionType.RemovePost
      post: post

  queryPostsByEntity: (entity) ->
    #PostApi.queryPosts entity.id, entity.type
