req = require 'superagent'
{ApiUrl} = require 'connectx/config'
{PostStore} = require 'connectx/stores'
{stubs, token} = require './helpers'
_ = require 'lodash'
guid = require 'guid'
Q = require 'q'

module.exports =
  createPost: (post, cb) ->
    # TODO: Convert to Q
    post.id = stubs.getServerId()
    #_.delay (-> cb stubs.getRandomError(0.5), post), stubs.getNetworkDelay()
    req.post "#{ApiUrl}/post"
      .withCredentials()
      .type 'json'
      .set 'CONNECTX-AUTH', token()
      #.attach 'file', new Blob([new Uint8Array(array)], {type: 'image/png'}), guid.create().value
      .send _.omit PostStore.trim(post), 'file' # removes client-side only properties
      .end (err, res) ->
        unless res.error
          cb null, res.body
        else
          cb res.error
  commentOn: (postId, comment, cb) ->
    #comment.id = stubs.getServerId()
    #_.delay (-> cb stubs.getRandomError(0.5), comment), stubs.getNetworkDelay(100, 300)
    req.post "#{ApiUrl}/reply"
      .withCredentials()
      .type 'json'
      .set 'CONNECTX-AUTH', token()
      .send {post: {id: postId}, author: comment.author, text: comment.text}
      .end (err, res) ->
        unless res?.error or err? or res?.statusType isnt 2
          cb null, res.body
        else
          cb res.error

  deletePost: (id, cb) ->
    req.del "#{ApiUrl}/post/#{id}"
      .withCredentials()
      .set 'CONNECTX-AUTH', token()
      .end (err, res) ->
        unless res.error
          cb null
        else
          cb res.error

  deleteComment: (postId, commentId) ->
    req.del "#{ApiUrl}/reply/#{postId}/#{commentId}"
      .withCredentials()
      .set 'CONNECTX-AUTH', token()
      .end (err, res) ->
        unless res.error
          cb null
        else
          cb res.error

  queryPosts: (id, type, cb) ->
    deferred = Q.defer()

    req.get "#{ApiUrl}/posts/#{type}/#{id}"
      .withCredentials()
      .set 'CONNECTX-AUTH', token()
      .end (err, res) ->
        return deferred.reject err if err or res.statusType isnt 2
        return deferred.resolve res.body

    deferred.promise.nodeify cb
    return deferred.promise
