req = require 'superagent'
{ApiUrl} = require 'connectx/constants'
{stubs, token} = require './helpers'
_ = require 'lodash'
guid = require 'guid'
Q = require 'q'

module.exports =

  createEntity: (type, data, cb) ->
    deferred = Q.defer()

    req.post "#{ApiUrl}/entity/#{type}"
      .withCredentials()
      .set 'CONNECTX-AUTH', token()
      .send data
      .end (err, res) ->
        # replace err with res.body.message
        return deferred.reject err if err
        return deferred.resolve res.body

    deferred.promise.nodeify cb
    return deferred.promise

  fetchEntity: (id, type, cb) ->
    deferred = Q.defer()

    req.get "#{ApiUrl}/entity/#{type}/#{id}"
      .withCredentials()
      .set 'CONNECTX-AUTH', token()
      .end (err, res) ->
        # replace err with res.body.message
        return deferred.reject {id, type}, err if err
        deferred.resolve res.body

    # This allows for both a 'nodeback' and promises
    deferred.promise.nodeify cb
    return deferred.promise
