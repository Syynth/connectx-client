_ = require 'lodash'
{EventEmitter} = require 'events'

{SourceType, ActionType} = require 'connectx/config'
Dispatcher = require 'connectx/dispatcher'
Cache = require 'connectx/cache'

BaseStore = require './baseStore'

recordEntity = (action) ->
  return if action.entity.type isnt 'user'
  @recordUser action.entity

recordEntities = (action) ->
  if action.entityType is @schema.type then @recordUsers action.entities

recordUser = (user) ->

class UserStore extends BaseStore
  storeKey: 'USER_STORE'
  schema:
    id: String
    type: 'user'
    email: String
    token: String
    name: String
    privacy: String
    description: String
    connections: [Object]
    location:
      address: String
      city: String
      state: String
      zip: String
      note: String
    profileImage: String
    coverImage: String
    images: [String]
  set: (key, val) -> super key, @ensureFields val
  getOrDefault: (id) ->
    res = @get(id) || {id: id}
    @ensureFields res
  onStorageFull: -> @clearAll()
  recordUsers: (users) -> users.map (user) => @recordUser user
  recordUser: (user) ->
    @set user.id, @ensureFields user
  handlers: [
    action: ActionType.UserLogin
    fn: recordEntity
  ,
    action: ActionType.UserLogout
    fn: BaseStore::wipeCache
  ,
    action: ActionType.EntityFetch
    fn: recordEntity
  ,
    action: ActionType.ConnectionQuery
    fn: recordEntities
  ,
    action: ActionType.EntitySearch
    fn: recordEntities
  ]

module.exports = new UserStore Dispatcher
