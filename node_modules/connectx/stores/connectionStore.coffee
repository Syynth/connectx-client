Dispatcher = require 'connectx/dispatcher'
{SourceType, ActionType} = require 'connectx/config'
_ = require 'lodash'

BaseStore = require './baseStore'
GroupStore = require './groupStore'
UserStore = require './userStore'
#EventStore = require './eventStore'
#CourseStore = require './courseStore'

etypes = ['user', 'group', 'course', 'event']

getEntityForData = (eData) ->
  if _.isString eData
    entity = {_id: eData}
  else
    entity = eData

getType = (cn) ->
  for etype in etypes
    if cn[etype]
      return etype

isAdminOf = (entity, admin) ->
  unless entity.connections
    return false
  cns = _.filter entity.connections, (c) -> c[admin.type]?
  return cns[0].admin

getEntityConnections = (action, recurse = true) ->
  cns = action.entity.connections
  id = action.entity.id
  for cn in cns # iterate over connections
    type = getType cn
    entity = getEntityForData cn[type]
    @setConnectionData id, cn, entity
    unless cn.pending
      oCn = {pending: false, admin: isAdminOf(entity, action.entity)}
      @setConnectionData entity._id, oCn, action.entity, false

class ConnectionStore extends BaseStore
  storeKey: 'CONNECTION_STORE'
  getWithId: (entityId, connectionType, entityType) ->
    e = @get entityId
    results = []
    if connectionType is 'strong' or connectionType is 'outbound'
      (results.push data if data[entityType]) for id, data of e when data.pending isnt (connectionType is 'strong')
      return results
    else
      return @query (cn) -> cn[entityId] and cn[entityId].pending
  setConnectionData: (id, cn, entity, pending) ->
    cnData = @get id
    cnData = {} unless cnData?
    cnData[entity._id] = cn
    if pending is true or pending is false
      cnData.pending = pending
    @set id, cnData
  dependents: [GroupStore, UserStore]
  isAdmin: (user, entity) ->
    for cnId, cn of (@get entity.id)
      return true if cn.admin && cn.user is user.id
    return false
  handlers: [
    action: ActionType.UserLogin
    fn: getEntityConnections
  ,
    action: ActionType.EntityFetch
    fn: getEntityConnections
  ]

module.exports = new ConnectionStore Dispatcher
