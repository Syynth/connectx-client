_ = require 'lodash'
{EventEmitter} = require 'events'

{SourceType, ActionType} = require 'connectx/config'
Dispatcher = require 'connectx/dispatcher'
Cache = require 'connectx/cache'

BaseStore = require './baseStore'

recordEntity = (action) ->
  return if action.entity.type isnt @schema.type
  @recordGroup action.entity

recordEntities = (action) ->
  if action.entityType is @schema.type
    @recordGroups action.entities

class GroupStore extends BaseStore
  storeKey: 'GROUP_STORE'
  schema:
    id: String
    type: 'group'
    name: String
    privacy: String
    description: String
    announcement:
      title: String
      body: String
    location:
      address: String
      city: String
      state: String
      zip: Number
      note: String
    profileImage: String
    coverImage: String
    timesFile: String
    resultsFile: String
  recordGroups: (groups) -> groups.map (group) => @recordGroup group
  recordGroup: (group) -> @set group.id, @ensureFields group
  getOrDefault: (id) -> @ensureFields @get(id) || {id}
  onStorageFull: -> @clearAll()
  handlers: [
    action: ActionType.UserLogout
    fn: BaseStore::wipeCache
  ,
    action: ActionType.EntityFetch
    fn: recordEntity
  ,
    action: ActionType.ConnectionQuery
    fn: recordEntities
  ,
    action: ActionType.EntitySearch
    fn: recordEntities
  ]

module.exports = new GroupStore Dispatcher
