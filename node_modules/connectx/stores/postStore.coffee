
###
PostStore should:
+ store posts by id/clientId
+ query posts by author
+ query posts by owner
+ persist posts to disk
- support pagination (later)
+ switch from clientId to serverId after a post has been saved
+ clear cache/disk when user logs out
+ mark posts as failed when requests fail
+ support POST retries
###

{EventEmitter} = require 'events'
Dispatcher = require 'connectx/dispatcher'
{SourceType, ActionType} = require 'connectx/constants'
_ = require 'lodash'
Cache = require 'connectx/cache'

BaseStore = require './baseStore'

p = new Cache

getKeyForAction = (data) ->
  if data.post.id then id else data.clientId

markPostFailed = (cliendId, self) ->
  post = p.get clientId
  post.failed = true
  self.write 'postCache', p.data
  self.emitChange()

migratePostToServerId = (oldId, newId, self) ->
  post = p.get oldId
  post.id = newId
  post.getId = -> newId
  delete post.failed
  p.unset oldId
  p.set newId, post
  self.write 'postCache', p.data

removePost = (data, self) ->
  p.unset getKeyForAction data
  self.emitChange()
  self.write 'postCache', p.data

removeAllPosts = (self) ->
  p.clear()
  self.emitChange()
  self.write 'postCache', p.data

addPosts = (data, self) ->
  for postData in data.posts
    post = _.extend {}, postData, getId: -> getKeyForAction postData
    p.set(getKeyForAction data, post)
  self.emitChange()
  self.write 'postCache', p.data

class PostStore extends BaseStore
  constructor: ->
    p = @read 'postCache'
  storeKey: 'NOTIFICATION_STORE'
  onStorageFull: -> removeAllPosts()
  getFailed: -> p.query (post) -> post.failed
  getByAuthorId: (id) -> p.query (post) -> post.author.id is id
  getByOwnderId: (id) -> p.query (post) -> post.owner.id is id
  handlers: [
    source: SourceType.Client
    type: ActionType.AddPost
    fn: (payload) -> addPost payload.action, @
  ,
    source: SourceType.Client
    type: ActionType.RemovePost
    fn: (payload) -> removePost payload.action, @
  ,
    source: SourceType.Client
    type: ActionType.UserLogout
    fn: (payload) -> p = new Cache
  ,
    source: SourceType.Server
    type: ActionType.PostSaved
    fn: (payload) ->
      migratePostToServerId payload.action.clientId, payload.action.serverId, @
  ,
    source: SourceType.Server
    type: ActionType.PostCreationFailed
    fn: (payload) -> markPostFailed payload.action.clientId, @
  ,
    source: SourceType.Server
    type: ActionType.PostCollectionSync
    fn: (payload) -> addPost payload.action, @
  ]

module.exports = new PostStore Dispatcher
