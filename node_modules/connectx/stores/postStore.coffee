{SourceType, ActionType} = require 'connectx/config'
Dispatcher = require 'connectx/dispatcher'
Cache = require 'connectx/cache'
BaseStore = require './baseStore'

_ = require 'lodash'

getKeyForAction = (action) -> action.post.id || action.clientId
getKeyForPost = (post) -> post.id || post.clientId

markPostFailed = (action) ->
  post = @queue.get action.clientId
  post.failed = true
  post.pending = false
  @queue.set action.clientId, post
  @commit()

migratePostToServerId = (action) ->
  oldId = action.clientId
  newId = action.serverId
  post = @queue.get oldId
  delete post.clientId
  post.id = newId
  post.pending = false
  post.getId = -> getKeyForPost post
  delete post.failed
  @queue.unset oldId
  @set newId, post

markPending = (action) ->
  post = @queue.get action.clientId
  post.pending = true
  post.failed = false
  @queue.set action.clientId, post
  @commit()

addPosts = (data) ->
  for postData in data.posts
    do (postData) =>
      post = _.clone postData
      unless post.id
        post.clientId = data.clientId
        post.pending = true
        delete post.file # remove base64 - otherwise 5mb will be too small!
      post.getId = -> getKeyForPost post
      delete post.comments
      unless post.id
        @queue.set post.getId(), post
        @commit()
      else
        @set post.getId(), post

class PostStore extends BaseStore
  storeKey: 'POST_STORE'
  schema:
    author: Object
    owner: Object
    title: String
    text: String
    createdAt: Date
    file: String
  constructor: (dispatcher) ->
    super dispatcher
    data = @read 'cache'
    ###
    # TODO: After localForage
    data = @read 'postCache', =>
      for id, post of data
        do (post) -> data[id].getId = -> getKeyForPost post
      @cache = new Cache data
      @commit ()
    ###
    for id, post of data
      do (post) -> data[id].getId = -> getKeyForPost post
    @cache = new Cache data
  write: (key, data) ->
    posts = {}
    for id, post of data when !post.failed and !post.pending
      posts[id] = post
    super key, posts
  onStorageFull: -> @clearAll()
  getFailed: -> @query (post) -> post.failed
  getByAuthorId: (id) -> (@query (post) -> post.author.id is id).sort().reverse()
  getByOwnerId: (id) -> (@query (post) -> post.owner.id is id).sort().reverse()
  handlers: [
    action: ActionType.CreatePost
    fn: addPosts
  ,
    action: ActionType.RemovePost
    fn: (action) -> @unset action.post.id
  ,
    action: ActionType.PostResent
    fn: markPending
  ,
    action: ActionType.UserLogout
    fn: PostStore::wipeCache
  ,
    action: ActionType.PostSaved
    fn: migratePostToServerId
  ,
    action: ActionType.PostCreationFailed
    fn: markPostFailed
  ,
    action: ActionType.PostCollectionSync
    fn: (action) ->
      @query (post) -> post.owner.id is action.entity.id
        .map (post) => @unset post.id
      addPosts.call @, action
  ]

module.exports = new PostStore Dispatcher
