
###
PostStore should:
+ store posts by id/clientId
+ query posts by author
+ query posts by owner
+ persist posts to disk
- support pagination (later)
+ switch from clientId to serverId after a post has been saved
+ clear cache/disk when user logs out
+ mark posts as failed when requests fail
+ support POST retries
###

{EventEmitter} = require 'events'
Dispatcher = require 'connectx/dispatcher'
{SourceType, ActionType} = require 'connectx/constants'
_ = require 'lodash'

BaseStore = require './baseStore'

p = {}

getKeyForAction = (data) ->
  if data.post.id then id else data.clientId

markPostFailed = (cliendId, self) ->
  post = p[clientId]
  post.failed = true
  self.write 'postCache', p
  self.emitChange()

migratePostToServerId = (oldId, newId, self) ->
  post = p[oldId]
  post.id = newId
  delete post.failed
  delete p[oldId]
  p[newId] = post
  self.write 'postCache', p

removePost = (data, self) ->
  delete p[getKeyForAction data]
  self.emitChange()
  self.write 'postCache', p

removeAllPosts = (self) ->
  p = {}
  self.emitChange()
  self.write 'postCache', p

addPost = (data, self) ->
  p[getKeyForAction data] = data.post
  self.emitChange()
  self.write 'postCache', p

class PostStore extends BaseStore
  constructor: ->
    p = @read 'postCache'
  storeKey: 'NOTIFICATION_STORE'
  getAll: -> _.values p
  getFailed: -> _.filter _.values(p), (post) -> post.failed
  getByAuthorId: (id) -> _.filter p, (post) -> post.author.id is id
  getByOwnderId: (id) -> _.filter p, (post) -> post.owner.id is id
  handlers: [
    source: SourceType.Client
    type: ActionType.AddPost
    fn: (payload) -> addPost payload.action, @
  ,
    source: SourceType.Client
    type: ActionType.RemovePost
    fn: (payload) -> removePost payload.action, @
  ,
    source: SourceType.Client
    type: ActionType.UserLogout
    fn: (payload) -> removeAllPosts @
  ,
    source: SourceType.Server
    type: ActionType.PostSaved
    fn: (payload) ->
      migratePostToServerId payload.action.clientId, payload.action.serverId, @
  ,
    source: SourceType.Server
    type: ActionType.PostCreationFailed
    fn: (payload) -> markPostFailed payload.action.clientId, @
  ]

store = module.exports = new PostStore

store.dispatchToken = Dispatcher.register store.handleDispatch.bind(store)
