Dispatcher = require 'connectx/dispatcher'
{SourceType, ActionType} = require 'connectx/config'
_ = require 'lodash'

BaseStore = require './baseStore'

n = {}

getKey = (n) -> "#{n.message}_#{n.detail}_#{n.status}"

removeNotification = (data) ->
  delete n[getKey data]
  @emitChange()

addNotification = (data) ->
  n[getKey data] = data
  @emitChange()
  if data.lifespan > 0
    _.delay (=> removeNotification.call @, data), data.lifespan

###
Memory only cache of success/error notifications
###
class NotificationStore extends BaseStore
  storeKey: 'NOTIFICATION_STORE'
  onStorageFull: ->
  getAll: -> _.values n
  handlers: [
    action: ActionType.UserLogout
    fn: BaseStore::wipeCache
  ,
    action: ActionType.AddNotification
    fn: addNotification
  ,
    action: ActionType.RemoveNotification
    fn: removeNotification
  ]

module.exports = new NotificationStore Dispatcher
