
{EventEmitter} = require 'events'
Dispatcher = require 'connectx/dispatcher'
{SourceType, ActionType} = require 'connectx/constants'
_ = require 'lodash'

BaseStore = require './baseStore'

n = {}

getKey = (n) -> "#{n.message}_#{n.detail}_#{n.status}"

removeNotification = (data, ctx) ->
  delete n[getKey data]
  ctx.emitChange()

addNotification = (data, ctx) ->
  n[getKey data] = data
  ctx.emitChange()
  if data.lifespan > 0
    _.delay (-> removeNotification data, ctx), data.lifespan

class NotificationStore extends BaseStore
  storeKey: 'NOTIFICATION_STORE'
  onStorageFull: ->
  getAll: -> _.values n
  handlers: [
    source: SourceType.Client
    type: ActionType.AddNotification
    fn: (payload) -> addNotification payload.action, @
  ,
    source: SourceType.Client
    type: ActionType.RemoveNotification
    fn: (payload) -> removeNotification payload.action, @
  ]

module.exports = new NotificationStore Dispatcher
