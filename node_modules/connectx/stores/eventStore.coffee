_ = require 'lodash'
{EventEmitter} = require 'events'

{SourceType, ActionType} = require 'connectx/config'
Dispatcher = require 'connectx/dispatcher'
Cache = require 'connectx/cache'

BaseStore = require './baseStore'

recordEntity = (action) ->
  return if action.entity.type isnt 'event'
  recordEvent.call @, action.entity

recordEvent = (event) -> @set event.id, @ensureFields event

class EventStore extends BaseStore
  storeKey: 'EVENT_STORE'
  schema:
    id: String
    type: 'event'
    name: String
    privacy: String
    description: String
    startTime: Date
    endTime: Date
    connections: [Object]
    images: [String]
    announcement:
      title: String
      body: String
    location:
      address: String
      city: String
      state: String
      zip: Number
      note: String
    profileImage: String
    coverImage: String
    timesFile: String
    resultsFile: String
  set: (key, val) -> super key, @ensureFields val
  getOrDefault: (id) ->
    res = @get(id) || {id: id}
    @ensureFields res
  onStorageFull: -> @clearAll()
  handlers: [
    action: ActionType.UserLogout
    fn: BaseStore::wipeCache
  ,
    action: ActionType.EntitySearch
    fn: (action) ->
      if action.entityType is 'event'
        action.entities.map (e) =>
          recordEvent.call @, e
  ]

module.exports = new EventStore Dispatcher
