{SourceType, ActionType} = require 'connectx/config'
Dispatcher = require 'connectx/dispatcher'
Cache = require 'connectx/cache'
BaseStore = require './baseStore'

_ = require 'lodash'

getKeyForAction = (action) -> action.comment.id || action.clientId
getKeyForComment = (comment) -> comment.id || comment.clientId

markCommentFailed = (action) ->
  comment = @queue.get action.clientId
  comment.failed = true
  comment.pending = false
  @queue.set action.clientId, comment
  @commit()

migrateCommentToServerId = (action) ->
  oldId = action.clientId
  newId = action.serverId
  comment = @queue.get oldId
  delete comment.clientId
  comment.id = newId
  comment.pending = false
  comment.getId = -> getKeyForComment comment
  delete comment.failed
  @queue.unset oldId
  @set newId, comment

markPending = (action) ->
  comment = @queue.get action.clientId
  comment.pending = true
  comment.failed = false
  @queue.set action.clientId, comment
  @commit()

addComments = (action) ->
  (action.comments ? []).map (commentData) =>
    comment = _.clone commentData
    unless comment.id
      comment.clientId = action.clientId
      comment.pending = true
    comment.getId = -> getKeyForComment comment
    comment.postId ?= action.postId
    unless comment.id
      @queue.set comment.getId(), comment
      @commit()
    else
      @set comment.getId(), comment

class CommentStore extends BaseStore
  storeKey: 'COMMENT_STORE'
  schema:
    author: Object
    text: String
    createdAt: Date
  constructor: (dispatcher) ->
    super dispatcher
    data = @read 'cache'
    for id, comment of data
      do (comment) -> data[id].getId = -> getKeyForComment comment
    @cache = new Cache data
  write: (key, data) ->
    comments = {}
    for id, comment of data when !comment.failed and !comment.pending
      comments[id] = comment
    super key, comments
  onStorageFull: -> @clearAll()
  getFailed: -> @query (comment) -> comment.failed
  getCommentsForPost: (postId) -> (@query (comment) -> comment.postId is postId).sort().reverse()
  handlers: [
    action: ActionType.CommentCreate
    fn: addComments
  ,
    action: ActionType.CommentDelete
    fn: (action) -> @unset action.comment.id
  ,
    action: ActionType.CommentResent
    fn: markPending
  ,
    action: ActionType.UserLogout
    fn: BaseStore::wipeCache
  ,
    action: ActionType.CommentSaved
    fn: migrateCommentToServerId
  ,
    action: ActionType.CommentCreationFailed
    fn: markCommentFailed
  ,
    action: ActionType.CommentCollectionSync
    fn: (action) ->
      @query (comment) -> comment.postId is action.postId
        .map (comment) => @unset comment.id
      addComments.call @, action
  ]

module.exports = new CommentStore Dispatcher
