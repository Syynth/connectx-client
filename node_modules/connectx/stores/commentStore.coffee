{SourceType, ActionType} = require 'connectx/constants'
Dispatcher = require 'connectx/dispatcher'
Cache = require 'connectx/cache'
BaseStore = require './baseStore'

_ = require 'lodash'

getKeyForAction = (action) -> action.comment.id || action.clientId
getKeyForComment = (comment) -> comment.id || comment.clientId

markCommentFailed = (action) ->
  comment = @get action.clientId
  comment.failed = true
  comment.pending = false
  @commit()

migrateCommentToServerId = (action) ->
  oldId = action.clientId
  newId = action.serverId
  comment = @get oldId
  delete comment.clientId
  comment.id = newId
  comment.pending = false
  comment.getId = -> getKeyForComment comment
  delete comment.failed
  @unset oldId
  @set newId, comment

markPending = (action) ->
  comment = @get action.clientId
  comment.pending = true
  comment.failed = false
  @set action.clientId, comment

addComments = (data) ->
  for commentData in data.comments
    do (commentData) ->
      comment = _.clone commentData
      unless comment.id
        comment.clientId = data.clientId
        comment.pending = true
      comment.getId = -> getKeyForComment comment
      comment.postId = data.postId
      @set comment.getId(), comment

addCommentsForPosts = (action) ->

class CommentStore extends BaseStore
  storeKey: 'COMMENT_STORE'
  schema:
    author: Object
    text: String
    createdAt: Date
  constructor: (dispatcher) ->
    super dispatcher
    data = @read 'cache'
    for id, comment of data
      do (comment) -> data[id].getId = -> getKeyForComment comment
    @cache = new Cache data
  write: (key, data) ->
    comments = {}
    for id, comment of data when !comment.failed and !comment.pending
      comments[id] = comment
    super key, comments

  onStorageFull: -> @clearAll()
  getFailed: -> @query (comment) -> comment.failed
  getById: (id) -> @get id
  getCommentsForPost: (postId) -> @query (comment) -> comment.postId is postId
  handlers: [
    action: ActionType.CommentCreate
    fn: addComments
  ,
    action: ActionType.CommentDelete
    fn: CommentStore::unset
  ,
    action: ActionType.CommentResent
    fn: markPending
  ,
    action: ActionType.UserLogout
    fn: CommentStore::wipeCache
  ,
    action: ActionType.CommentSaved
    fn: migrateCommentToServerId
  ,
    action: ActionType.CommentCreationFailed
    fn: markCommentFailed
  ,
    type: ActionType.PostCollectionSync
    fn: addCommentsForPosts
  ]

module.exports = new CommentStore Dispatcher
