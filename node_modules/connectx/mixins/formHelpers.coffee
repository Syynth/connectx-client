email = require 'regex-email'
{NotificationActionCreators} = require 'connectx/actions'

getLabel = (reqs, defaultName) ->
  if reqs.label
    reqs.label
  else
    defaultName

getPatternError = (input, pattern) ->
  switch pattern
    when 'email'
      unless email.test input
        'is not a valid email'
    else
      undefined

module.exports =
  validate: ->
    data = {}
    for fieldName, reqs of @formFields
      data[fieldName] = @refs[fieldName].getDOMNode().value.trim()
    errors = []
    for fieldName, reqs of @formFields
      if reqs.required and data[fieldName].length is 0
        errors.push "#{getLabel reqs, fieldName} is required"
      else if reqs.pattern
        err = getPatternError data[fieldName], reqs.pattern
        errors.push "#{data[fieldName]} #{err}" if err
      else if reqs.equalTo
        unless data[reqs.equalTo] is data[fieldName]
          errors.push "#{getLabel reqs, fieldName} must match #{getLabel @formFields[reqs.equalTo], reqs.equalTo}"
    if errors.length > 0
      NotificationActionCreators.postErrors errors
      return false
    return true
  serializeForm: ->
    res = {}
    for field, data of @formFields when not data.transient
      res[field] = @refs[field].getDOMNode().value.trim()
    return res
  clearForm: ->
    res = {}
    for field, data of @formFields
      res[field] = ''
    @setState res
